##Caching the inverse of a matrix
## Matrix inversion is usually a costly computation and there may be some benefit to caching the inverse of a matrix rather than compute it repeatedly (there are also alternatives to matrix inversion that we will not discuss here). Your assignment is to write a pair of functions that cache the inverse of a matrix.
## To write a pair of functions e.g makeCacheMatrix and CacheSolve that cache the inverse of a matrix

##makeCacheMatrix is a function that creates a special matrix object that can cache its inverse

makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL
  set <- function(y) {
    x <<- y
    inv <<- NULL
  }
  get <- function() x
  setInverse <- function(inverse) inv <<- inverse
  getInverse <- function() inv
  list(set = set, get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}



##CacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve retrieves the inverse from the cache.

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
  inv <- x$getInverse()
  if(!is.null(inv)) {
    message("getting cached data")
    return(inv)
  }
  mat <- x$get()
  inv <- solve(mat, ...)
  x$setInverse(inv)
  inv
}

#testing my function
source("~/GitHub/ProgrammingAssignment2/cachematrix.R")
 
##ik_matrix <- makeCacheMatrix(matrix(1:4, 2,2))
##ik_matrix$get()
#[,1] [,2]
#[1,]    1    3
#[2,]    2    4
##ik_matrix$getInverse()
NULL
##cacheSolve(ik_matrix)
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
# ik_matrix$getInverse()
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
## ik_matrix$set(matrix(c(3,1,2,4),2,2))
##ik_matrix$get()
#[,1] [,2]
#[1,]    3    2
#[2,]    1    4
##ik_matrix$getInverse()
NULL
##cacheSolve(ik_matrix)
#[,1] [,2]
#[1,]  0.4 -0.2
#[2,] -0.1  0.3
##ik_matrix$getInverse()
#[,1] [,2]
#[1,]  0.4 -0.2
#[2,] -0.1  0.3
